1/1     unison
16/15   minor second
9/8     major second
5/4     minor third
6/5     major third
4/3     perfect fourth
3/2     perfect fifth
5/3     minor sixth
8/5     major sixth
16/9    minor seventh
15/8    major seventh
2/1     octave

Possibilities:
- Should harmonic distance work like this instead?: There are generating intervals, and each generating interval comes with a distance. The distance to a note is the shortest harmonic distance found.
- Arc the interval lines?
- In rectilinear, make the draw order follow the distance from the viewer, i.e. sum of terms like  n2*np.log(2) * k * np.sin(phi). What should the draw order be when it's not rectilinear?

TODO:

Next:
- A UI element for adding and removing base tones.
- Shift+click on tones to leave them on until next click on the same tone? Maybe have a touchable button on the screen that does the same thing too? Or make it work like a piano pedal, where the tones stop playing ones that button/shift is released?

Convenience:
- Make the height of the keyboard adjustable.
- Add a dropdown menu with preset options. (Note: Pythogorean should be one.)
- Add a volume slider.
- Make pitchlines not show under tones.

Zoom:
- Implement vertical zoom.
- Reposition the zoom slider(s) to be along the axes of the canvas somehow.
- Put limits on horizontal zoom at the hearing thresholds.

Possible improvements:
- Should the keyboard carry tone names?
- Make every number selector be such that when it's active, it spawns a hovering slider next to it. Get rid of ranges inputs.
- Could we give up drawing open-ended steps? Would simplify things. (Would it?) Besides, the gradients for them are wrong anyway, since they always draw as if the rel_hn of the endpoint is 0, even though it could be negative. Actually, even drawing steps to tones outside the viewbox is problematic, since those tones may not be generated. There's more thoughts in a TODO note in the .js.
- Visualize the vertical gap being adjusted when changing y-shifts?
- Could we somehow color the tones based on their prime decomposition, with each prime associated with some color?
- Could we output midi files on request?
- Add an option for tone labels in the Ben Johnston notation: https://kylegann.com/BJNotation.html
- Somehow animate the notes that playing. Vibrating edge, or maybe vibrating pitchline, vibrating with a frequency proportional to pitch?
- For origin frequency, also have some method of picking 12-EDO tones without knowing their frequency. Maybe a dropdown menu?

Help:
- Implement the help/info page/overlay.
- Write Help documentation. One global one, but maybe also smaller ones for various subparts of Settings.
- Before the first note is played, show the following tooltip, or something like it: "Click or poke red dots to play them. The stronger the red the closer harmonically that tone is to the base tone, circled in black. Click ? for more info."

Style:
- Make a common way for inputting intervals and base tones.
- Redo the representation of intervals in the UI.
- Redo the representation of axes in the UI.
- When ever an interval in the UI is given as a decimal, also give the cents.
- Make the linestyles of pitchlines, intervals, and base tone borders adjustable.
- Make the background color adjustable, and set it to black by default.
- Create color presets, at least one dark and one light.
- Create a checkbox for setting all the settings stuff either light or dark.
- Style Settings with nice fonts etc.
- Give choice for having tones be something other than circles. Diamonds for instance could work well.

Code style and performance:
- Use more CSS classes.
- Go through TODOs in source.
- Optimize performance by storing data to avoid recomputation.
- Document and pretty the code: Maybe separate JS files, certainly a separate CSS file, ...
