1/1     unison
16/15   minor second
9/8     major second
6/5     minor third
5/4     major third
4/3     perfect fourth
3/2     perfect fifth
5/3     minor sixth
8/5     major sixth
16/9    minor seventh
15/8    major seventh
2/1     octave


TODO

BEFORE RELEASE:

Help:
- Write help overlay text, and explanations in Settings.

Axes:
- Redo the representation of axes in the UI.
- Should we switch from primes to more generic generating intervals? This would be fine, as long as we check that they are linearly independent. It would make the "closure" much smaller. Right now everything that's within a pitch factor of 5 needs to be included (with limit 5). Think through though, using the lattice/theory, that this would really guarantee generating all tones that should exist.

Other:
- Rename "base tone" to "root tone" everywhere?
- Come up with a better name?

Settings:
- Make the background color adjustable, and maybe set it to black by default.
- Create color presets, at least one dark and one light.
- Make every number selector be such that when it's active, it spawns a hovering slider next to it. Get rid of ranges inputs.
- For origin frequency, also have some method of picking 12-EDO tones without knowing their frequency. Maybe a dropdown menu?
- Add a dropdown menu with preset options. (Note: Pythagorean should be one.)
- Make everything in Settings prettier.

Code quality:
- Figure out imports and dependency management.
- Try Typescript?

AFTER RELEASE:

Performance:
- Clean up the whole code base and try to improve performance, especially at start-up.
- Can we have the canvas update as tones are being drawn, instead of everything freezing? Some judicious use of async?

Convenience:
- Make the height of the keyboard adjustable.
- Add a volume slider.

Zoom:
- Reposition the zoom slider(s) to be along the axes of the canvas somehow?
- Put limits on horizontal zoom at the hearing thresholds.

Possible improvements:
- Should there be a button to center the view?
- URL representations of yShifts, baseTones, harmDistSteps, and midCoords could be prettier/shorter.
- Should the EDO keyboard carry tone names?
- Visualize the vertical gap being adjusted when changing y-shifts?
- Could we somehow color the tones based on their prime decomposition, with each prime associated with some color?
- Could we output midi files on request?
- Add an option for tone labels in the Ben Johnston notation: https://kylegann.com/BJNotation.html
- Somehow animate the notes that are playing. Vibrating edge, or maybe vibrating pitchline, vibrating with a frequency proportional to pitch?
- Proposal for how to handle dynamic base tones: Have a list of permanent base tones with possibly different weights, and also an setting for how many recently played tones should get base tone status, and at what weight for the most recent one (linear slope from there backwards).
- Have a visual button that's kinda like a sustain pedal, but holding it disables playing and activates adding/removing base tones. Note that you could also click on 12-EDO keys to create base tones based on them, which would then make it fine for the user to remove the last existing base tone.
- Make Pan be Pan & zoom, have it enable pinch-zooming or two-finger zooming.
- Alternatively to the above, as Henri proposed, just pan and zoom whenever touchpoints are moved, regardless of if those touchpoints also play tones. May cause some touchpoints to no longer lie on the tones that they play, but who cares. Possible problem: Accidental, annoying small moves.
- Maybe there could also be a third button for dragging around y-shifts by just grab-and-drag. Doesn't sound very important though, and maybe not worth it.
- Would it possible to make the tones behave such that if two are about to overlap, they change both change shape to prevent, creating a boundary half way in between?
- Should harmonic distance work like this instead?: There are generating intervals, and each generating interval comes with a distance. The distance to a note is the shortest harmonic distance found.

Style:
- Whenever an interval in the UI is given as a decimal, also give the cents.
- Make the linestyles of pitchlines, intervals, and base tone borders adjustable.
- Create a checkbox for setting all the settings stuff either light or dark.
- Give choice for having tones be something other than circles. Diamonds for instance could work well.

Code style and performance:
- Use more CSS classes.
- Go through TODOs in source.
- Should I load Tone.js and SVG.js from some CDN or other external source?
